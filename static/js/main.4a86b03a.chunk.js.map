{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","person","id","name","email","CardList","people","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredPeople","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAAe,I,wBCIFA,EAAK,SAACC,GAAD,OACd,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,4BACrB,6BAAKL,EAAMI,OAAOE,OAClB,4BAAIN,EAAMI,OAAOG,YCHZC,EAAS,SAAAR,GAKlB,OACA,qBAAKC,UAAU,YAAf,SACKD,EAAMS,OAAOC,KAAI,SAAAN,GAAM,OACpB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,UCVjBM,G,MAAU,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACjC,OACI,uBAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoElDG,E,kDA5Cb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTR,OAAO,GACPS,YAAY,IAEd,EAAKL,aAAa,EAAKA,aAAaM,KAAlB,gBANP,E,qDASb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAAChB,OAAOe,S,0BAIrC,SAAaE,GACXC,KAAKF,SAAS,CAACP,YAAYQ,EAAEE,OAAOC,U,oBAOtC,WACI,MAA4BF,KAAKV,MAA1BR,EAAP,EAAOA,OAAQS,EAAf,EAAeA,YACTY,EAAerB,EAAOsB,QAAO,SAAA3B,GAAM,OACvCA,EAAOE,KAAK0B,cAAcC,SAASf,EAAYc,kBAEjD,OACA,sBAAK/B,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CACAW,YAAY,gBACZC,aAAcc,KAAKd,eAEnB,cAAC,EAAD,CAAUJ,OAAQqB,W,GArCRI,aChBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4a86b03a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './card.styles.css';\r\nimport React from 'react'\r\n\r\n\r\nexport const Card=(props)=>(\r\n    <div className='card-container'>\r\n        <img alt='person' src={`https://robohash.org/${props.person.id}?set=set2&size=180x180`} />\r\n        <h2>{props.person.name}</h2>\r\n        <p>{props.person.email}</p>\r\n    </div>\r\n);","import React, { Children } from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n\r\nexport const CardList=props=>{\r\n    //console.log(props);\r\n    //card-list receives a list of people's name\r\n    //while it needs to send each individual card data to card component.\r\n    // !!! because card-list only responsible for the card-list appearance not for each individual card\r\n    return (\r\n    <div className='card-list'>\r\n        {props.people.map(person=>(         \r\n            <Card key={person.id} person={person} />  //pass each person into Card component\r\n        ))}  \r\n    </div>\r\n    );\r\n} ;","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox=({placeholder,handleChange})=>{\r\n    return(\r\n        <input type='search' placeholder={placeholder} onChange={handleChange} /> )\r\n    // <input type='search' placeholder='search people' onChange={\r\n    //     e=>{\r\n    //         this.setState({searchField:e.target.value},console.log(e.target.value)); {/*the input will change the state*/}\r\n    //     }\r\n    // }/>)\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport react, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.<br/>\n//           hi there\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      people:[],\n      searchField:''\n    };\n    this.handleChange=this.handleChange.bind(this)\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users=>this.setState({people:users}));    \n    }\n\n\n  handleChange(e){\n    this.setState({searchField:e.target.value});\n  }\n\n  // handleChange=(e)=>{\n  //   this.setState({searchField:e.target.value});\n  // }\n\n  render(){\n      const {people, searchField}=this.state;\n      const filteredPeople=people.filter(person=>\n        person.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n      return (\n      <div className=\"App\">\n        <h1>People Cards</h1>\n        <SearchBox \n        placeholder='search people' \n        handleChange={this.handleChange}\n        />\n        <CardList people={filteredPeople}>\n        </CardList>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}